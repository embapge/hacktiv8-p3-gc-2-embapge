basePath: /
definitions:
  dto.CreateProductRequest:
    properties:
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - name
    - price
    - stock
    type: object
  dto.CreateTransactionRequest:
    properties:
      product_id:
        type: string
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  dto.ProductResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  dto.TransactionResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      payment_id:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      status:
        type: string
      total:
        type: number
      updated_at:
        type: string
    type: object
  dto.UpdateProductRequest:
    properties:
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    type: object
  utility.ErrorResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for a shopping service.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Shopping Service API
  version: "1.0"
paths:
  /products:
    get:
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ProductResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with the input payload
      parameters:
      - description: Create Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
      summary: Delete a product
      tags:
      - products
    get:
      description: Get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product with the input payload
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
      summary: Update a product
      tags:
      - products
  /transactions:
    post:
      consumes:
      - application/json
      description: Create a new transaction and payment
      parameters:
      - description: Create Transaction
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utility.ErrorResponse'
      summary: Create a new transaction
      tags:
      - transactions
swagger: "2.0"
